<block-chart-config>
  <div>
    <div class="d-flex flex-row">
      <div class="flex-0 mr-3">
        <div class="mb-3">
          <label class="d-block form-label">
            Color
          </label>
          <button class={ `btn-picker bg-${props.block.color || 'white'} dropdown-toggle` } type="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false"></button>
          <div class="dropdown-menu p-3">
            <button each={ (color, i) in colors } class={ `btn-picker bg-${color} mr-2` } onclick={ (e) => onColor(e, color) } />
          </div>
        </div>
      </div>
      <div class="flex-1">
        <div class="mb-3">
          <label class="form-label">
            Name
          </label>
          <input name="name" class="form-control" type="text" value={ props.block.name || '' } onchange={ (e) => onName(e) } />
        </div>
      </div>
    </div>
        
    <!-- Model -->
    <div class="mb-3">
      <label class="form-label">
        Model
      </label>
      <eden-select on-change={ (e, value) => onModel(value) } ref={ ref('model') } placeholder="Select Model" data={ getModel() } />
    </div>
    <!-- / Model -->

    <!-- Metric -->
    <div if={ props.block.model } class="mb-3">
      <label class="form-label">
        Metric
      </label>
      <div>
        <eden-select ref={ ref('metric') } placeholder="Select Metric" data={ getMetric() } class="w-25 d-inline-block mr-1" on-change={ (e, value) => onMetric(value) } />
        <eden-select ref={ ref('field') } if={ props.block.metric !== 'count' } placeholder="Select Field" data={ getField() } class="w-25 d-inline-block bg-light mr-1" on-change={ (e, value) => onField(value) } />
        <span>
          Grouped by
        </span>
        <eden-select ref={ ref('grouping') } placeholder="Select Grouping" data={ getGrouping() } class="w-25 d-inline-block mx-1" on-change={ (e, value) => onGrouping(value) } />
        <eden-select if={ props.block.grouping === 'field' } ref={ ref('group') } placeholder="Select Group Field" data={ getGroup() } class="w-25 d-inline-block bg-light mr-1" on-change={ (e, value) => onGroup(value) } />
      </div>
    </div>
    <!-- / Metric -->

    <hr />

    <div class="mb-3">
      <label class="form-label">
        Element Display
      </label>
      <code-block ref={ ref('display') } mode="handlebars" content={ props.block.display || '' } prevent-update={ true } on-change={ (e) => onDisplay(e) } />
      <div class="alert alert-primary mt-2">
        <hbs template={ props.block.display || '{{value}}' } data={ { value : 10 } } />
      </div>
    </div>

    <hr />

    <!-- Filter -->
    <div if={ props.block.model } class="mb-3">
      <label class="form-label">
        Filter
      </label>
      <dashup-query fields={ getFields() } on-change={ (val) => onFilter(val) } value={ props.block.filter ? JSON.parse(props.block.filter) : [] } />
    </div>
    <!-- / Filter -->
  </div>

  <script>
    export default class BlockChartConfig {


      // ////////////////////////////////////////////////////////////////////////////
      //
      // Riot Methods
      //
      // ////////////////////////////////////////////////////////////////////////////

      /**
       * on before mount
       *
       * @param {Object} props
       */
      onBeforeMount() {
        // set colors
        this.colors = ['white', 'primary', 'secondary', 'success', 'info', 'warning', 'danger'];

        // bind
        this.onName   = this.onName.bind(this);
        this.onColor  = this.onColor.bind(this);
        this.onModel  = this.onModel.bind(this);
        this.onMetric = this.onMetric.bind(this);
        this.onFilter = this.onFilter.bind(this);
      }
      


      // ////////////////////////////////////////////////////////////////////////////
      //
      // Config Methods
      //
      // ////////////////////////////////////////////////////////////////////////////

      /**
       * on class
       *
       * @param  {Event} e
       */
      onColor (e, color) {
        // prevent default
        e.preventDefault();
        e.stopPropagation();

        // set color
        this.props.set('color', color);
      }

      /**
       * on color
       */
      onName(e) {
        // prevent
        e.preventDefault();
        e.stopPropagation();

        // set color
        this.props.set('name', e.target.value);
      }

      /**
       * on model
       */
      onModel(val) {
        // get value
        if (!val) val = this.refs.model.val();
        
        // set model
        this.props.set('model', val);
      }

      /**
       * on where
       */
      onFilter(filter) {
        // set model
        this.props.set('filter', JSON.stringify(filter));
      }

      /**
       * on display
       */
      onDisplay(value) {
        // set color
        this.props.set('display', value);
      }

      /**
       * on add filter
       */
      onMetric(val) {
        // set metric
        if (!val) val = this.refs.val.val();
  
        // set
        this.props.set('metric', val);
      }

      /**
       * on add filter
       */
      onField(val) {
        // set filter
        if (!val) val = this.refs.val.val();

        // set
        this.props.set('field', val);
      }

      /**
       * on add filter
       */
      onGroup(val) {
        // set filter
        if (!val) val = this.refs.group.val();

        // set
        this.props.set('group', val);
      }

      /**
       * on add filter
       */
      onGrouping(val) {
        // set metric field
        if (!val) val = this.refs.grouping.val();

        // set
        this.props.set('grouping', val);
      }


      // ////////////////////////////////////////////////////////////////////////////
      //
      // Get Methods
      //
      // ////////////////////////////////////////////////////////////////////////////

      /**
       * get value
       */
      getModel() {
        // return value
        return Array.from(this.props.dashup.get('pages').values()).filter((page) => {
          // return model pages
          return page.get('type') === 'model';
        }).map((page) => {
          // return type
          return {
            name     : page.get('name'),
            value    : page.get('_id'),
            selected : this.props.block.model === page.get('_id'),
          };
        });
      }

      /**
       * get filter types
       */
      getMetric() {
        // return types
        return [{
          value : 'count',
          text  : 'Count of Rows'
        }, {
          value : 'sum',
          text  : 'Sum of...',
        }, {
          value : 'avg',
          text  : 'Average of...',
        }, {
          value : 'min',
          text  : 'Minimum of...',
        }, {
          value : 'max',
          text  : 'Maximum of...',
        }].map((item) => {
          // set selected
          if (item.value === this.props.block.metric) item.selected = true;
        
          // return item
          return item;
        });
      }

      /**
       * gets all fields
       */
      getFields() {
        // reduce
        return Array.from(this.props.dashup.get('pages').values()).filter((page) => {
          // return page
          return page.get('type') === 'form' && page.get('data.model') === this.props.block.model;
        }).reduce((accum, page) => {
          // check page
          if (!page || !page.get('data.fields')) return accum;

          // loop fields
          accum.push(...page.get('data.fields'));

          // return accum
          return accum;
        }, []);
      }

      /**
       * get value
       */
      getField() {
        // return value
        return [...(this.getFields())].filter((f) => ['number', 'money', 'date'].includes(f.type)).map((field) => {
          // return fields
          return {
            name     : field.label,
            value    : field.uuid,
            selected : this.props.block.field === field.uuid,
          };
        });
      }

      /**
       * get value
       */
      getGroup() {
        // return value
        return this.getFields().map((field) => {
          // return fields
          return {
            name     : field.label,
            value    : field.uuid,
            selected : this.props.block.group === field.uuid,
          };
        });
      }

      /**
       * get value
       */
      getGrouping() {
        // return value
        return [{
          name     : 'Total',
          value    : 'total',
          selected : (this.props.block.grouping || 'total') === 'total',
        }, {
          name     : 'Created',
          value    : 'created',
          selected : this.props.block.grouping === 'created',
        }, {
          name     : 'Updated',
          value    : 'updated',
          selected : this.props.block.grouping === 'updated',
        }, {
          name     : 'Field',
          value    : 'field',
          selected : this.props.block.grouping === 'field',
        }];
      }


      // ////////////////////////////////////////////////////////////////////////////
      //
      // MISC METHODS
      //
      // ////////////////////////////////////////////////////////////////////////////

      /**
       * ref
       */
      ref(name) {
        // set refs
        if (!this.refs) this.refs = {};

        // return ref function
        return (that) => {
          // set ref
          this.refs[name] = that;
        };
      }

      /**
       * set loading
       */
      loading(type, way) {
        // set loading
        if (!this.__loading) this.__loading = new Map();

        // check loading
        if (!type) return !!Array.from(this.__loading.values()).find((v) => v);
        if (typeof way === 'undefined') return !!this.__loading.get(type);

        // set loading
        this.__loading.set(type, way);
        this.update();
      }
    }
  </script>
</block-chart-config>