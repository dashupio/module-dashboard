<block-card-view>
  <div class={ `flex-1 d-flex flex-column h-100 w-100${props.block.background ? '' : ' card'}` }>
    <div if={ props.block.name } class={ props.block.background ? ' mb-2' : 'card-header' }>
      <b>{ props.block.name }</b>
    </div>
    <div if={ getTabs().length > 1 } class={ props.block.background ? 'd-flex' : 'card-header' }>
      <ul class="nav nav-tabs w-100">
        <li each={ (tab, i) in getTabs() } class="nav-item">
          <a class={ `nav-link${state.tab === i ? ' active' : ''}` } href="#" onclick={ (e) => onTab(e, i) }>
            { tab.title }
          </a>
        </li>
      </ul>
    </div>
    <div class={ `flex-column oy-scroll ${props.block.background ? ' flex-1' : ' card-body'}` }>
      <hbs if={ getTabs().length } template={ getTabs()[state.tab].display || '' } data={ props.context } />
    </div>
  </div>

  <script>
    // import perfect scrollbar
    import PerfectScrollbar from 'perfect-scrollbar';

    // export default
    export default class BlockCardView {

      /**
       * on before mount
       */
      onBeforeMount() {
        // tab
        this.state.tab = 0;

        // bind tabs
        this.onTab = this.onTab.bind(this);
      }

      /**
       * on mounted
       */
      onMounted() {
        // check frontend
        if (typeof window === 'undefined') return;
        
        // fix column sizing
        if (this.$('.oy-scroll') && !this.$('.oy-scroll.ps')) {
          // ps
          this.ps = new PerfectScrollbar(this.$('.oy-scroll'), {
            suppressScrollX : true,
          });
        }
      }

      /**
       * on tab
       */
      onTab(e, tab) {
        // prevent default
        e.preventDefault();
        e.stopPropagation();

        // update
        this.update({
          tab,
        });
      }

      /**
       * get tabs
       */
      getTabs() {
        // return tabs
        return (this.props.block.tabs || []);
      }
    }
  </script>
</block-card-view>