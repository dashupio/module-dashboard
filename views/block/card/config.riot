<block-card-config>
  <div>
    <div class="mb-3">
      <label class="form-label">
        Name
      </label>
      <input name="name" class="form-control" type="text" value={ props.block.name || '' } onchange={ (e) => onName(e) } />
    </div>
    <div class="mb-3">
      <label class="form-label">
        Card Display
      </label>
      <code-block ref={ ref('display') } mode="handlebars" content={ props.block.display || '' } prevent-update={ true } on-change={ (e) => onDisplay(e) } />
      <div class="alert alert-primary mt-2">
        <hbs template={ props.block.display || '' } data={ props.context } />
      </div>
    </div>
  </div>

  <script>
    export default class BlockCardConfig {


      // ////////////////////////////////////////////////////////////////////////////
      //
      // Riot Methods
      //
      // ////////////////////////////////////////////////////////////////////////////

      /**
       * on before mount
       *
       * @param {Object} props
       */
      onBeforeMount() {
        // bind
        this.onName = this.onName.bind(this);
      }
      


      // ////////////////////////////////////////////////////////////////////////////
      //
      // Config Methods
      //
      // ////////////////////////////////////////////////////////////////////////////

      /**
       * on color
       */
      onName(e) {
        // prevent
        e.preventDefault();
        e.stopPropagation();

        // set color
        this.props.set('name', e.target.value);
      }

      /**
       * on display
       */
      onDisplay(value) {
        // set color
        this.props.set('display', value);
      }

      // ////////////////////////////////////////////////////////////////////////////
      //
      // MISC METHODS
      //
      // ////////////////////////////////////////////////////////////////////////////

      /**
       * ref
       */
      ref(name) {
        // set refs
        if (!this.refs) this.refs = {};

        // return ref function
        return (that) => {
          // set ref
          this.refs[name] = that;
        };
      }

      /**
       * set loading
       */
      loading(type, way) {
        // set loading
        if (!this.__loading) this.__loading = new Map();

        // check loading
        if (!type) return !!Array.from(this.__loading.values()).find((v) => v);
        if (typeof way === 'undefined') return !!this.__loading.get(type);

        // set loading
        this.__loading.set(type, way);
        this.update();
      }
    }
  </script>
</block-card-config>