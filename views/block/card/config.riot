<block-card-config>
  <div>
    <div class="mb-3">
      <label class="form-label">
        Name
      </label>
      <input name="name" class="form-control" type="text" value={ props.block.name || '' } onchange={ (e) => onName(e) } />
    </div>

    <hr />
      
    <div class="mb-3">
      <div class="form-check form-switch">
        <input class="form-check-input" id="is-required" type="checkbox" onchange={ (e) => onBackground(e) } { ...getProps({ checked : !props.block.background }) }>
        <label class="form-check-label" for="is-required">
          Enable Background
        </label>
      </div>
    </div>

    <hr />
    
    <div each={ (tab, i) in props.block.tabs } class="mb-3">
      <label class="form-label">
        Tab #{ i + 1 }
      </label>
      <div class="d-flex mb-2">
        <input type="text" name="tab[{ i }]" value={ tab.title } class="form-control flex-1" onchange={ (e) => onTabTitle(e, tab) } />
        <button class="btn btn-danger ml-2" onclick={ (e) => onRemoveTab(e, i) }>
          <i class="fa fa-times" />
        </button>
      </div>
      <code-block mode="handlebars" content={ tab.display || '' } prevent-update={ true } on-change={ (e) => onTabDisplay(e, tab) } />
    </div>
    <button class="btn btn-success mr-3" onclick={ (e) => onTab(e) }>
      Add Tab
    </button>
  </div>

  <script>
    export default class BlockCardConfig {


      // ////////////////////////////////////////////////////////////////////////////
      //
      // Riot Methods
      //
      // ////////////////////////////////////////////////////////////////////////////

      /**
       * on before mount
       *
       * @param {Object} props
       */
      onBeforeMount() {
        // bind
        this.onName = this.onName.bind(this);
        this.onTabDisplay = this.onTabDisplay.bind(this);

        // check tabs
        if (!this.props.block.tabs) this.props.block.tabs = [{ title : 'Default' }];
      }

      /**
       * get props
       */
      getProps(obj) {
        // return get props
        return Object.keys(obj).reduce((accum, key) => {
          // set accum
          if (obj[key]) accum[key] = true;

          // return accum
          return accum;
        }, {});
      }
      


      // ////////////////////////////////////////////////////////////////////////////
      //
      // Config Methods
      //
      // ////////////////////////////////////////////////////////////////////////////

      /**
       * on color
       */
      onName(e) {
        // prevent
        e.preventDefault();
        e.stopPropagation();

        // set color
        this.props.set('name', e.target.value);
      }

      /**
      * on option
      *
      * @param {Event} e
      */
      onTab(e) {
        // prevent default
        e.preventDefault();
        e.stopPropagation();

        // add option
        this.props.block.tabs.push({
          title   : '',
          display : '',
        });

        // run opts
        this.props.set('tabs', this.props.block.tabs);
      }

      /**
      * on option name
      *
      * @param {Event} e
      */
      onTabTitle(e, tab) {
        // set value
        tab.title = e.target.value;

        // run opts
        this.props.set('tabs', this.props.block.tabs);
      }

      /**
      * on option
      *
      * @param {Event} e
      */
      onRemoveOption(e, i) {
        // prevent default
        e.preventDefault();
        e.stopPropagation();

        // remove option
        this.props.block.tabs.splice(i, 1);

        // run opts
        this.props.set('tabs', this.props.block.tabs);
      }

      /**
       * on display
       */
      onTabDisplay(value, tab) {
        // set display
        tab.display = value;
        
        // set color
        this.props.set('tabs', this.props.block.tabs);
      }

      /**
       * on model
       */
      onBackground (e) {
        // get value
        const val = $(e.target).is(':checked');

        // get backlog
        const background = !val;
        
        // set model
        this.props.set('background', background);
      }

      // ////////////////////////////////////////////////////////////////////////////
      //
      // MISC METHODS
      //
      // ////////////////////////////////////////////////////////////////////////////

      /**
       * ref
       */
      ref(name) {
        // set refs
        if (!this.refs) this.refs = {};

        // return ref function
        return (that) => {
          // set ref
          this.refs[name] = that;
        };
      }

      /**
       * set loading
       */
      loading(type, way) {
        // set loading
        if (!this.__loading) this.__loading = new Map();

        // check loading
        if (!type) return !!Array.from(this.__loading.values()).find((v) => v);
        if (typeof way === 'undefined') return !!this.__loading.get(type);

        // set loading
        this.__loading.set(type, way);
        this.update();
      }
    }
  </script>
</block-card-config>