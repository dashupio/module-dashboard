<page-dashboard-menu>
  <div>
    <eden-select if={ !props.altering && props.page.get('data.form') } ref={ ref('select') } type="button" button="white" load={ loadData } placeholder="Select Context" data={ getData() } on-change={ (e, id, item) => onChange(id, item) } class="d-inline-flex" />
    <eden-select if={ !props.altering } ref={ ref('type') } type="button" button="white" placeholder="Select Range" data={ getRange() } on-change={ (e, id, item) => props.props('range', id) } class="d-inline-flex ml-2" />

    <div if={ !props.altering } class="ml-2 border-left d-inline-block mr-2">
      <button class={ classes({ 'btn btn-primary' : true, 'disabled' : isToday(props.date || new Date()) }) } onclick={ (e) => onToday(e) } data-toggle="tooltip" title="Reset">
        { isToday(props.date || new Date()) ? 'Today' : moment(props.date || new Date()).format('MMMM DD YYYY') }
      </button>

      <div class="btn-group ml-1">
        <button class="btn btn-primary" onclick={ (e) => onPrev(e) } data-toggle="tooltip" title="Previous">
          <i class="fa fa-chevron-left" />
        </button>
        <button class="btn btn-primary" onclick={ (e) => onNext(e) } data-toggle="tooltip" title="Next">
          <i class="fa fa-chevron-right" />
        </button>
      </div>
    </div>
    <button if={ !props.altering } class="mr-2 btn btn-link text-dark" onclick={ (e) => onAlter(e) }>
      <i class="fat fa-pencil mr-2" />
      Alter Display
    </button>
    
    <button if={ props.altering } class="btn btn-dark mr-2" onclick={ (e) => onCreate(e) }>
      <i class="fa fa-plus mr-2" />
      Block
    </button>
    <button if={ props.altering } class="mr-2 btn btn-primary" onclick={ (e) => onAlter(e) }>
      <i class="fat fa-check mr-2"></i>
      Finish Altering
    </button>
  </div>

  
  <script>
    // import moment
    import moment from 'moment';
  
    // export default
    export default class PageDashboardMenu {
      
      /**
       * on before mount
       */
      onBeforeMount() {
        // get fields
        this.limits = [20, 40, 60, 80, 100];

        // moment
        this.moment = moment;

        // on create
        this.onCreate = this.onCreate.bind(this);
        this.loadData = this.loadData.bind(this);
      }

      /**
       * on prev
       */
      onToday(e) {
        // prevent
        e.preventDefault();
        e.stopPropagation();
        
        // set date
        this.props.props('date', new Date());
      }
      
      /**
       * on create
       */
      onCreate(e) {
        // create
        this.props.page.emit('create', true);
      }

      /**
       * on alter
       */
      onAlter(e) {
        // prevent default
        e.preventDefault();
        e.stopPropagation();

        // props
        this.props.props('altering', !this.props.altering);
      }

      /**
       * on prev
       */
      onPrev(e) {
        // prevent
        e.preventDefault();
        e.stopPropagation();
        
        // check date
        if (!this.props.range || this.props.range === 'month') {
          // add one month
          return this.props.props('date', moment(this.props.date || new Date()).subtract(1, 'month').toDate());
        }
        if (this.props.range === 'week') {
          // add one month
          return this.props.props('date', moment(this.props.date || new Date()).subtract(1, 'week').toDate());
        }
        if (this.props.range === 'day') {
          // add one month
          return this.props.props('date', moment(this.props.date || new Date()).subtract(1, 'day').toDate());
        }
      }

      /**
       * on prev
       */
      onNext(e) {
        // prevent
        e.preventDefault();
        e.stopPropagation();
        
        // check date
        if (!this.props.range || this.props.range === 'month') {
          // add one month
          return this.props.props('date', moment(this.props.date || new Date()).add(1, 'month').toDate());
        }
        if (this.props.range === 'week') {
          // add one month
          return this.props.props('date', moment(this.props.date || new Date()).add(1, 'week').toDate());
        }
        if (this.props.range === 'day') {
          // add one month
          this.props.props('date', moment(this.props.date || new Date()).add(1, 'day').toDate());
        }
      }

      /**
       * check is today
       */
      isToday(date) {
        // check day
        return moment().format('YYYY-MM-DD') === moment(date).format('YYYY-MM-DD');
      }

      /**
       * on change
       */
      onChange(id, item) {
        // current
        this.props.onItem(null, item, false);
      }

      /**
       * load from api
       */
      async loadData(search) {
        // get values
        const by    = this.props.page.get('data.by');
        const model = this.props.page.get('data.model');

        // get model
        const modelPage = this.props.dashup.page(model);

        // by field
        const byField = by && this.getFields().find((f) => f.uuid === by);

        // check by field
        if (!byField) return [];

        // check query
        const query = this.props.page.get('data.filter') ? JSON.parse(this.props.page.get('data.filter')) : [];

        // create where
        let data = modelPage;

        // loop query
        query.forEach((item) => {
          // add where
          data = data.where(item);
        });

        // inc
        if (search && search.length) {
          // inc
          data = data.inc(byField.name || byField.uuid, search);
        }

        // add limit
        this.result = await data.limit(25).find();

        // return map
        return this.result.map((item) => {
          // return value
          return {
            name  : item.get(byField.name || byField.uuid),
            data  : item,
            value : item.get('_id'),
          };
        });
      }

      /**
       * get value
       */
      getData() {
        // by
        const by = this.props.page.get('data.by');

        // by field
        const byField = by && this.getFields().find((f) => f.uuid === by);

        // return
        if (!byField) return [];
        
        // return value
        return this.props.current ? [this.props.current].map((item) => {
          // return value
          return {
            name     : item.get ? item.get(byField.name || byField.uuid) : item[byField.name || byField.uuid],
            data     : item,
            value    : item.get ? item.get('_id') : item._id,
            selected : true,
          };
        }) : [];
      }

      /**
       * get range
       */
      getRange() {
        // return day
        return ['Day', 'Week', 'Month'].map((title) => {
          // return value
          return {
            name     : title,
            value    : title.toLowerCase(),
            selected : (this.props.range || 'month') === title.toLowerCase(),
          };
        });
      }

      /**
       * get fields
       */
      getFields() {
        // get values
        const model = this.props.page.get('data.model');
        const forms = Array.from(this.props.dashup.get('pages').values()).filter((p) => p.get('type') === 'form' && p.get('data.model') === model);

        // return fields
        return [].concat(...(forms.map((f) => (f.get('data.fields') || []))));
      }


      // ////////////////////////////////////////////////////////////////////////////
      //
      // MISC METHODS
      //
      // ////////////////////////////////////////////////////////////////////////////

      /**
       * ref
       */
      ref(name) {
        // set refs
        if (!this.refs) this.refs = {};

        // return ref function
        return (that) => {
          // set ref
          this.refs[name] = that;
        };
      }

      /**
       * classes
       */
      classes(obj) {
        // return classes
        return Object.keys(obj).filter((key) => !!obj[key]).join(' ');
      }

      /**
       * set loading
       */
      loading(type, way) {
        // set loading
        if (!this.__loading) this.__loading = new Map();

        // check loading
        if (!type) return !!Array.from(this.__loading.values()).find((v) => v);
        if (typeof way === 'undefined') return !!this.__loading.get(type);

        // set loading
        this.__loading.set(type, way);
        this.update();
      }
    }
  </script>
</page-dashboard-menu>